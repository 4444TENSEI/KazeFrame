// Gin便捷JSON响应封装函数, 进行通用消息响应管理, 能少写一点重复代码是一点
package util

import (
	"github.com/gin-gonic/gin"
)

// 需要两个参数: 1.真实响应头代码(int) 2.消息字典映射序号(int)/自定义内容(string)二选一
// 统一使用字典映射消息调用示例
// util.Rsp(c, 401, 4301)
// 自定义消息调用示例
// util.Rsp(c, 401, "自定义消息")
// 含变量的消息调用示例
// util.Rsp(c, 500, fmt.Sprintf("清除缓存键[%s]失败", key))
func Rsp[T int | string](c *gin.Context, statusCode int, msg T) {
	var msgStr string
	switch v := any(msg).(type) {
	case int:
		msgStr = msgMap[v]
	case string:
		msgStr = v
	}
	c.JSON(statusCode, gin.H{
		"code":    statusCode,
		"message": msgStr,
	})
	//非200响应码时调用Abort终止客户端后续请求
	if statusCode != 200 {
		c.Abort()
	}
}

// 消息映射字典
var msgMap = map[int]string{
	200: "操作成功",
	400: "客户端出错",
	401: "没有权限",
	403: "禁止访问",
	404: "找不到内容",
	500: "后端服务炸了",
	// 常见响应
	4000: "请求体格式不对, 需要是JSON格式",
	4001: "缺少请求参数或参数不正确",
	4002: "未进行任何操作",
	// 权限相关
	4101: "登陆状态已失效, 请重新登陆",
	4102: "您的权限不足",
	4103: "登陆状态验证失败, 请重新登陆",
	4104: "请登陆后再来",
	4105: "令牌校验失败",
	// 格式校验相关
	4300: "用户名格式不正确",
	4301: "密码格式不正确",
	4302: "邮箱格式不正确",
	4303: "昵称格式不正确",
	4304: "个人头像URL格式不正确",
	4305: "个人背景URL格式不正确",
	// 缓存相关
	4400: "验证码错误或已过期, 请检查或重新获取",
	4401: "验证码不存在, 请先获取",
	4403: "验证码格式不正确",
	// 邮件相关
	4500: "邮件已发出, 请查看您的收件箱, 如果没有收到邮件, 请检查您的邮箱配置是否正确",
	4501: "后端无法连接到邮件服务端",
	4502: "服务端未开启邮件服务, 此接口无法使用",
	// 资源相关
	4601: "用户账号不存在",
	4602: "用户邮箱不存在, 请再次检查或先去注册",
}
